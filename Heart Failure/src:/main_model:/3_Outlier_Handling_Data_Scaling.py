# -*- coding: utf-8 -*-
"""3.Outlier_Handling_Data_Scaling.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gkckbAh_JsD34ETsSjuMFLVanOKkRMFG
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.preprocessing import StandardScaler

X_train = pd.read_csv('/content/X_train.csv')
X_val = pd.read_csv('/content/X_val.csv')
X_test = pd.read_csv('/content/X_test.csv')

y_train = pd.read_csv('/content/y_train.csv')
y_val = pd.read_csv('/content/y_val.csv')
y_test = pd.read_csv('/content/y_test.csv')

print(X_train.shape)
print(y_train.shape)

print(X_val.shape)
print(y_val.shape)

print(X_test.shape)
print(y_test.shape)

X_train.info()

print(X_train.describe())

plt.figure(figsize=(10, 6))
sns.scatterplot(x=X_train.index, y=X_train['creatinine_phosphokinase'])
#plt.title('Before: Combined Log Transformed & Outliers Removed "creatinine_phosphokinase"')
plt.xlabel('Data Point Index')
plt.ylabel('Value of the Creatinine Phosphokinase Feature')
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x=X_train.index, y=X_train['ejection_fraction'])
#plt.title('Before: Combined Log Transformed & Outliers Removed "ejection_fraction"')
plt.xlabel('Data Point Index')
plt.ylabel('Value of the Ejection Fraction Feature')
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x=X_train.index, y=X_train['platelets'])
#plt.title('Before: Combined Log Transformed & Outliers Removed "platelets"')
plt.xlabel('Data Point Index')
plt.ylabel('Value of the Platelets Feature')
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x=X_train.index, y=X_train['serum_creatinine'])
#plt.title('Before: Combined Log Transformed & Outliers Removed "serum_creatinine"')
plt.xlabel('Data Point Index')
plt.ylabel('Value of the Serum Creatinine Feature')
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x=X_train.index, y=X_train['serum_sodium'])
#plt.title('Before: Combined Log Transformed & Outliers Removed "serum_sodium"')
plt.xlabel('Data Point Index')
plt.ylabel('Value of the Serum Sodium Feature')
plt.grid(True)
plt.show()

X_train_processed = X_train.copy()
y_train_processed = y_train.copy()
X_val_processed = X_val.copy()
y_val_processed = y_val.copy()
X_test_processed = X_test.copy()
y_test_processed = y_test.copy()

features_to_transform_and_clean = ['creatinine_phosphokinase', 'platelets', 'serum_creatinine', 'ejection_fraction', 'serum_sodium']

iqr_bounds = {}

print("\n--- Applying Log Transformation to X_train ---")
for feature in features_to_transform_and_clean:
    if X_train_processed[feature].dtype == 'int64':
        X_train_processed[feature] = X_train_processed[feature].astype(np.float64)
    X_train_processed[feature] = np.log1p(X_train_processed[feature])

print("--- Applying Outlier Removal (IQR Method) to X_train ---")
initial_train_rows = X_train_processed.shape[0]

for feature in features_to_transform_and_clean:
    Q1 = X_train_processed[feature].quantile(0.25)
    Q3 = X_train_processed[feature].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    iqr_bounds[feature] = (lower_bound, upper_bound)

    X_train_processed = X_train_processed[(X_train_processed[feature] >= lower_bound) & (X_train_processed[feature] <= upper_bound)]

    y_train_processed = y_train_processed.loc[X_train_processed.index]

rows_removed_train = initial_train_rows - X_train_processed.shape[0]
print(f"Removed {rows_removed_train} rows from X_train and y_train due to outliers.")

print("\n--- X_train_processed Summary after Log Transform and Outlier Removal ---")
print(X_train_processed.describe())
print(f"Final X_train_processed shape: {X_train_processed.shape}, y_train_processed shape: {y_train_processed.shape}")

print("\n--- Applying Log Transformation and Outlier Removal to X_val ---")
initial_val_rows = X_val_processed.shape[0]
for feature in features_to_transform_and_clean:

    if X_val_processed[feature].dtype == 'int64':
        X_val_processed[feature] = X_val_processed[feature].astype(np.float64)
    X_val_processed[feature] = np.log1p(X_val_processed[feature])

    lower_bound, upper_bound = iqr_bounds[feature]
    X_val_processed = X_val_processed[(X_val_processed[feature] >= lower_bound) & (X_val_processed[feature] <= upper_bound)]
    y_val_processed = y_val_processed.loc[X_val_processed.index]


rows_removed_val = initial_val_rows - X_val_processed.shape[0]
print(f"Removed {rows_removed_val} rows from X_val and y_val due to outliers.")
print(f"Final X_val_processed shape: {X_val_processed.shape}, y_val_processed shape: {y_val_processed.shape}")

print("\n--- Applying Log Transformation and Outlier Removal to X_test ---")
initial_test_rows = X_test_processed.shape[0]
for feature in features_to_transform_and_clean:

    if X_test_processed[feature].dtype == 'int64':
        X_test_processed[feature] = X_test_processed[feature].astype(np.float64)
    X_test_processed[feature] = np.log1p(X_test_processed[feature])

    lower_bound, upper_bound = iqr_bounds[feature]
    X_test_processed = X_test_processed[(X_test_processed[feature] >= lower_bound) & (X_test_processed[feature] <= upper_bound)]
    y_test_processed = y_test_processed.loc[X_test_processed.index]


rows_removed_test = initial_test_rows - X_test_processed.shape[0]
print(f"Removed {rows_removed_test} rows from X_test and y_test due to outliers.")
print(f"Final X_test_processed shape: {X_test_processed.shape}, y_test_processed shape: {y_test_processed.shape}")

plt.figure(figsize=(10, 6))
sns.scatterplot(x=X_train_processed.index, y=X_train_processed['creatinine_phosphokinase'])
#plt.title('After: Combined Log Transformed & Outliers Removal on Creatinine Phosphokinase')
plt.xlabel('Data Point Index')
plt.ylabel('Value of the Log(1+creatinine_phosphokinase)')
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x=X_train_processed.index, y=X_train_processed['platelets'])
#plt.title('After: Combined Log Transformed & Outliers Removal on Platelets')
plt.xlabel('Data Point Index')
plt.ylabel('Value of the Log(1+platelets)')
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x=X_train_processed.index, y=X_train_processed['serum_creatinine'])
#plt.title('After: Combined Log Transformed & Outliers Removal on Serum Creatinine')
plt.xlabel('Data Point Index')
plt.ylabel('Value of the Log(1+serum_creatinine)')
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x=X_train_processed.index, y=X_train_processed['ejection_fraction'])
#plt.title('After: Combined Log Transformed & Outliers Removal on Ejection Fraction')
plt.xlabel('Data Point Index')
plt.ylabel('Value of the Log(1+ejection_fraction)')
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x=X_train_processed.index, y=X_train_processed['serum_sodium'])
#plt.title('After: Combined Log Transformed & Outliers Removal on Serum Sodium')
plt.xlabel('Data Point Index')
plt.ylabel('Value of the Log(1+serum_sodium)')
plt.grid(True)
plt.show()

numerical_features_for_scaling = ['age', 'creatinine_phosphokinase', 'ejection_fraction', 'platelets', 'serum_creatinine', 'serum_sodium', 'time']

scaler_standard = StandardScaler()
scaler_standard.fit(X_train_processed[numerical_features_for_scaling])

X_train_scaled = X_train_processed.copy()
X_val_scaled = X_val_processed.copy()
X_test_scaled = X_test_processed.copy()

X_train_scaled[numerical_features_for_scaling] = scaler_standard.transform(X_train_processed[numerical_features_for_scaling])
X_val_scaled[numerical_features_for_scaling] = scaler_standard.transform(X_val_processed[numerical_features_for_scaling])
X_test_scaled[numerical_features_for_scaling] = scaler_standard.transform(X_test_processed[numerical_features_for_scaling])

print("\n--- Data after applying StandardScaler ---")
print("\nHead of X_train_scaled:")
print(X_train_scaled.head())

print(X_train_scaled.shape)
print(y_train_processed.shape)

print(X_val_scaled.shape)
print(y_val_processed.shape)

print(X_test_scaled.shape)
print(y_test_processed.shape)

X_train_scaled.to_csv('X_train_processed.csv', index=False)
y_train_processed.to_csv('y_train_processed.csv', index=False)

X_val_scaled.to_csv('X_val_processed.csv', index=False)
y_val_processed.to_csv('y_val_processed.csv', index=False)

X_test_scaled.to_csv('X_test_processed.csv', index=False)
y_test_processed.to_csv('y_test_processed.csv', index=False)