# -*- coding: utf-8 -*-
"""4.SMOTE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ycT5P7RXJXQQuoEIS66-sfqewxuT0yjE
"""

import numpy as np
import pandas as pd

from collections import Counter
from imblearn.pipeline import Pipeline
from imblearn.over_sampling import SMOTE
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import GridSearchCV, StratifiedKFold

X_train = pd.read_csv('/content/X_train_processed.csv')
X_val = pd.read_csv('/content/X_val_processed.csv')
X_test = pd.read_csv('/content/X_test_processed.csv')

y_train = pd.read_csv('/content/y_train_processed.csv')
y_val = pd.read_csv('/content/y_val_processed.csv')
y_test = pd.read_csv('/content/y_test_processed.csv')

X_train.info()

print(X_train.shape)
print(y_train.shape)

print(X_val.shape)
print(y_val.shape)

print(X_test.shape)
print(y_test.shape)

y_train_np = y_train.to_numpy().flatten()

print(f"y_train_processed distribution before SMOTE tuning: {Counter(y_train_np)}")

class_counts = Counter(y_train_np)
minority_class = min(class_counts, key=class_counts.get)
majority_class = max(class_counts, key=class_counts.get)
min_class_count = class_counts[minority_class]

print(f"y_train_processed distribution before SMOTE tuning: {class_counts}")
print(f"Detected **Minority Class**: {minority_class} with {min_class_count} samples.")
print(f"Detected **Majority Class**: {majority_class} with {class_counts[majority_class]} samples.")

pipeline = Pipeline([
    ('smote', SMOTE()),
    ('classifier', LogisticRegression())
])

smote_k_neighbors_options = [k for k in [3, 5, 7, 9] if k < min_class_count]
if not smote_k_neighbors_options:
    if min_class_count > 1:
        smote_k_neighbors_options = [min_class_count - 1]
    else:
        raise ValueError("Cannot apply SMOTE")

param_grid = {
    'smote__k_neighbors': smote_k_neighbors_options,
    'smote__sampling_strategy': ['auto']
}

cv = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)

grid_search = GridSearchCV(
    pipeline,
    param_grid,
    cv=cv,
    scoring='roc_auc'
)

print("\nFitting GridSearchCV to find best SMOTE hyperparameters...")
grid_search.fit(X_train, y_train_np)

print("\n--- Best Tuned SMOTE Hyperparameters ---")
best_smote_params = {
    k.replace('smote__', ''): v
    for k, v in grid_search.best_params_.items()
    if k.startswith('smote__')
}
print(best_smote_params)

print(f"\nBest cross-validation ROC AUC score achieved with these parameters: {grid_search.best_score_:.4f}")

smote = SMOTE(**best_smote_params, random_state=42)
X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train_np)

print(f"Class distribution after SMOTE: {Counter(y_train_resampled)}")

X_train_resampled_df = pd.DataFrame(X_train_resampled, columns=X_train.columns)
y_train_resampled_df = pd.Series(y_train_resampled)

print("\nShapes after SMOTE:")
print(f"X_train_resampled: {X_train_resampled_df.shape}, y_train_resampled: {y_train_resampled_df.shape}")

X_train_resampled_df.to_csv('X_train_final.csv', index=False)
y_train_resampled_df.to_csv('y_train_final.csv', index=False)