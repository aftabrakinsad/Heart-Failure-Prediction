# -*- coding: utf-8 -*-
"""RF_Statistical_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IlZd0JubkmOjfVQ9rtZrocC-p6cQ4Jo7
"""

!pip install optuna

import optuna
import numpy as np
import pandas as pd
from sklearn.model_selection import KFold
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score

X_train = pd.read_csv('/content/X_train_final.csv').values
y_train = pd.read_csv('/content/y_train_final.csv').values.astype(np.float32).flatten()

X_val = pd.read_csv('/content/X_val_processed.csv').values
y_val = pd.read_csv('/content/y_val_processed.csv').values.astype(np.float32).flatten()

X_combined_for_cv = np.concatenate((X_train, X_val), axis=0)
y_combined_for_cv = np.concatenate((y_train, y_val), axis=0)

def objective_rf(trial):
    n_estimators = trial.suggest_int('n_estimators', 50, 500)
    max_depth = trial.suggest_int('max_depth', 3, 20, log=True)
    min_samples_split = trial.suggest_int('min_samples_split', 2, 20)
    min_samples_leaf = trial.suggest_int('min_samples_leaf', 1, 10)
    criterion = trial.suggest_categorical('criterion', ['gini', 'entropy'])

    rf_model = RandomForestClassifier(
        n_estimators=n_estimators,
        max_depth=max_depth,
        min_samples_split=min_samples_split,
        min_samples_leaf=min_samples_leaf,
        criterion=criterion,
        random_state=42,
    )

    rf_model.fit(X_train, y_train)
    y_pred_proba_val = rf_model.predict_proba(X_val)[:, 1]

    if len(np.unique(y_val)) > 1:
        val_auc = roc_auc_score(y_val, y_pred_proba_val)
        val_loss = 1.0 - val_auc
    else:
        return float('inf')

    return val_loss

print("\n--- Starting Optuna Optimization Study for Random Forest Baseline (Minimizing 1-AUC) ---")
study_rf = optuna.create_study(direction='minimize', study_name='RF_Optimization',
                              pruner=optuna.pruners.MedianPruner(n_startup_trials=5, n_warmup_steps=10))
study_rf.optimize(objective_rf, n_trials=200, show_progress_bar=True)

print("\n--- Random Forest Optimization Finished ---")
print(f"Number of finished trials: {len(study_rf.trials)}")
print(f"Best trial value (Validation 1-AUC): {study_rf.best_trial.value:.4f}")
print(f"Corresponding Best Validation AUC: {1 - study_rf.best_trial.value:.4f}")
print("Best Random Forest hyperparameters:")
best_params_rf = study_rf.best_trial.params
for key, value in best_params_rf.items():
    print(f"  {key}: {value}")

n_splits = 10
kf = KFold(n_splits=n_splits, shuffle=True, random_state=42)

rf_accuracy_scores = []
rf_auc_scores = []
rf_precision_scores = []
rf_recall_scores = []
rf_f1_scores = []

print(f"\n--- Starting {n_splits}-Fold Cross-Validation for Optimized Random Forest Baseline ---")

for fold, (train_index, val_index) in enumerate(kf.split(X_combined_for_cv, y_combined_for_cv)):
    print(f"\n--- Fold {fold+1}/{n_splits} ---")
    X_train_fold, X_val_fold = X_combined_for_cv[train_index], X_combined_for_cv[val_index]
    y_train_fold, y_val_fold = y_combined_for_cv[train_index], y_combined_for_cv[val_index]

    single_class_in_val_fold = (len(np.unique(y_val_fold)) <= 1)
    if single_class_in_val_fold:
        print(f"WARNING: Fold {fold+1} validation set contains only one class. AUC will be NaN.")

    rf_model_cv = RandomForestClassifier(
        n_estimators=best_params_rf['n_estimators'],
        max_depth=best_params_rf['max_depth'],
        min_samples_split=best_params_rf['min_samples_split'],
        min_samples_leaf=best_params_rf['min_samples_leaf'],
        criterion=best_params_rf['criterion'],
        random_state=42,
        n_jobs=-1
    )

    rf_model_cv.fit(X_train_fold, y_train_fold)
    y_pred_proba_rf = rf_model_cv.predict_proba(X_val_fold)[:, 1]
    y_pred_class_rf = rf_model_cv.predict(X_val_fold)

    rf_accuracy_scores.append(accuracy_score(y_val_fold, y_pred_class_rf))
    if not single_class_in_val_fold:
        rf_auc_scores.append(roc_auc_score(y_val_fold, y_pred_proba_rf))
    else:
        rf_auc_scores.append(np.nan)
    rf_precision_scores.append(precision_score(y_val_fold, y_pred_class_rf, zero_division=0))
    rf_recall_scores.append(recall_score(y_val_fold, y_pred_class_rf, zero_division=0))
    rf_f1_scores.append(f1_score(y_val_fold, y_pred_class_rf, zero_division=0))

    print(f"  Random Forest Baseline Fold {fold+1} Metrics:")
    print(f"    Accuracy: {rf_accuracy_scores[-1]:.4f}")
    print(f"    AUC: {rf_auc_scores[-1]:.4f}" if not np.isnan(rf_auc_scores[-1]) else "AUC: N/A")
    print(f"    Precision: {rf_precision_scores[-1]:.4f}")
    print(f"    Recall: {rf_recall_scores[-1]:.4f}")
    print(f"    F1-Score: {rf_f1_scores[-1]:.4f}")

print("--- Optimized Random Forest Baseline: 10-Fold Cross-Validation Results (Mean ± Standard Deviation) ---")
print(f"Accuracy: {np.nanmean(rf_accuracy_scores):.4f} ± {np.nanstd(rf_accuracy_scores):.4f}")
print(f"AUC: {np.nanmean(rf_auc_scores):.4f} ± {np.nanstd(rf_auc_scores):.4f}")
print(f"Precision: {np.nanmean(rf_precision_scores):.4f} ± {np.nanstd(rf_precision_scores):.4f}")
print(f"Recall: {np.nanmean(rf_recall_scores):.4f} ± {np.nanstd(rf_recall_scores):.4f}")
print(f"F1-Score: {np.nanmean(rf_f1_scores):.4f} ± {np.nanstd(rf_f1_scores):.4f}")

def bootstrap_confidence_interval(data, alpha=0.95, n_bootstraps=10000):
    if len(data) == 0 or np.all(np.isnan(data)):
        return (np.nan, np.nan)

    data = np.array(data)[~np.isnan(data)]
    if len(data) == 0:
        return (np.nan, np.nan)

    bootstrap_means = []
    for _ in range(n_bootstraps):
        sample = np.random.choice(data, size=len(data), replace=True)
        bootstrap_means.append(np.mean(sample))

    lower_percentile = (1 - alpha) / 2 * 100
    upper_percentile = (1 + alpha) / 2 * 100

    lower_bound = np.percentile(bootstrap_means, lower_percentile)
    upper_bound = np.percentile(bootstrap_means, upper_percentile)

    return (lower_bound, upper_bound)

print("\n--- Optimized Random Forest Baseline: 95% Confidence Intervals (from 10-Fold CV) ---")
ci_rf_accuracy = bootstrap_confidence_interval(rf_accuracy_scores)
ci_rf_auc = bootstrap_confidence_interval(rf_auc_scores)
ci_rf_precision = bootstrap_confidence_interval(rf_precision_scores)
ci_rf_recall = bootstrap_confidence_interval(rf_recall_scores)
ci_rf_f1 = bootstrap_confidence_interval(rf_f1_scores)

print(f"Accuracy CI: ({ci_rf_accuracy[0]:.4f}, {ci_rf_accuracy[1]:.4f})")
print(f"AUC CI: ({ci_rf_auc[0]:.4f}, {ci_rf_auc[1]:.4f})")
print(f"Precision CI: ({ci_rf_precision[0]:.4f}, {ci_rf_precision[1]:.4f})")
print(f"Recall CI: ({ci_rf_recall[0]:.4f}, {ci_rf_recall[1]:.4f})")
print(f"F1-Score CI: ({ci_rf_f1[0]:.4f}, {ci_rf_f1[1]:.4f})")